name: CI

on:
  push:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: 
        working_dir: [".", "./tools"]
    defaults:
      run:
        working-directory: ${{ matrix.working_dir }}
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.tool-versions'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.working_dir }}/package-lock.json'
      - run: |
          echo "NODE_EXTRA_CA_CERTS is $NODE_EXTRA_CA_CERTS"
          cat $NODE_EXTRA_CA_CERTS
      - name: Install dependencies
        run: npm i
      - run: echo "NODE_EXTRA_CA_CERTS is $NODE_EXTRA_CA_CERTS"
        if: always()
      - run: npm run lint

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.tool-versions'
          cache: 'npm'
      - run: |
          echo "NODE_EXTRA_CA_CERTS is $NODE_EXTRA_CA_CERTS"
          cat $NODE_EXTRA_CA_CERTS
          mkdir -p $HOME/.pki/nssdb && certutil --empty-password -d $HOME/.pki/nssdb -N \
            && certutil -d sql:$HOME/.pki/nssdb -A -t "C,," -n cacerts.crt -i $NODE_EXTRA_CA_CERTS
      - name: Install dependencies
        run: npm ci
      - run: echo "NODE_EXTRA_CA_CERTS is $NODE_EXTRA_CA_CERTS"
        if: always()
      - name: Build
        run: npm run build

  unit-test:
    name: "Test [Unit]"
    runs-on: ubuntu-latest
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.tool-versions'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Unit testing
        run: npm run test:unit
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "test-results/unit.xml"
        if: always()
      - uses: codecov/codecov-action@v3
        with:
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
        if: always()

  e2e-test:
    name: "Test [E2E]"
    runs-on: ubuntu-latest
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.tool-versions'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: E2E testing
        run: npm run test:playwright-e2e
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "test-results/e2e.xml"

  ct-test:
    name: "Test [Component]"
    runs-on: ubuntu-latest
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.tool-versions'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Component testing
        run: npm run test:playwright-ct
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "test-results/ct.xml"

  tools:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tools
    steps: 
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.tool-versions'
          cache: 'npm'
          cache-dependency-path: 'tools/package-lock.json'
      - name: Install dependencies
        run: npm ci

      - name: Dry run update zenn.json
        run: |
          npx ts-node updateZennJson.ts

      - name: Dry run update hatena_blog.json
        run: |
          npx ts-node updateHatenaBlogJson.ts
